{"ast":null,"code":"var _jsxFileName = \"C:\\\\BootCamp\\\\Jinsa-Repos\\\\React-portfolio\\\\src\\\\components\\\\pages\\\\Contact.js\",\n    _s = $RefreshSig$();\n\nimport '../../styles/Header.css';\nimport '../../styles/contact.css';\nimport React, { useState } from 'react';\nimport { validateEmail } from '../../utils/helpers';\nimport Header from '../Header';\nimport Footer from '../Footer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Contact() {\n  _s();\n\n  // Create state variables for the fields in the form\n  // We are also setting their initial values to an empty string\n  const [firstName, setFirstName] = useState('');\n  const [email, setEmail] = useState('');\n  const [message, setMessage] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const handleInputChange = e => {\n    // Getting the value and name of the input which triggered the change\n    const {\n      target\n    } = e;\n    const inputType = target.name;\n    const inputValue = target.value; // Based on the input type, we set the state of either email, username, and message\n\n    /*if (inputType === 'firstName') {\r\n       setFirstName(inputValue);\r\n     } else if (inputType === 'email') {\r\n       setEmail(inputValue);\r\n     } else {\r\n       setMessage(inputValue);\r\n     }*/\n\n    switch (inputType) {\n      case 'firstName':\n        setFirstName(inputValue);\n        break;\n\n      case 'email':\n        setEmail(inputValue);\n        break;\n\n      case 'message':\n        setMessage(inputValue);\n        break;\n\n      default:\n        setMessage(inputValue);\n        break;\n    }\n  };\n\n  const handleFormSubmit = e => {\n    // Preventing the default behavior of the form submit (which is to refresh the page)\n    e.preventDefault(); // First we check to see if the email is not valid or if the userName is empty. If so we set an error message to be displayed on the page.\n\n    if (!validateEmail(email)) {\n      setErrorMessage('Email is invalid'); // We want to exit out of this code block if something is wrong so that the user can correct it\n\n      return; // Then we check to see if the password is not valid. If so, we set an error message regarding the password.\n    }\n\n    alert(`Hello ${firstName} Message has been sent`); // If everything goes according to plan, we want to clear out the input after a successful registration.\n\n    setFirstName('');\n    setEmail('');\n    setMessage('');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Contact me\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: firstName,\n        name: \"firstName\",\n        onChange: handleInputChange,\n        type: \"text\",\n        placeholder: \"First name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: email,\n        name: \"email\",\n        onChange: handleInputChange,\n        type: \"email\",\n        placeholder: \"Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: message,\n        name: \"message\",\n        onChange: handleInputChange,\n        type: \"text\",\n        placeholder: \"type here\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: handleFormSubmit,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 10\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: errorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 7\n  }, this);\n}\n\n_s(Contact, \"dncOepwOfX6MJHZ8W2eis1yW44U=\");\n\n_c = Contact;\nexport default Contact;\n\nvar _c;\n\n$RefreshReg$(_c, \"Contact\");","map":{"version":3,"names":["React","useState","validateEmail","Header","Footer","Contact","firstName","setFirstName","email","setEmail","message","setMessage","errorMessage","setErrorMessage","handleInputChange","e","target","inputType","name","inputValue","value","handleFormSubmit","preventDefault","alert"],"sources":["C:/BootCamp/Jinsa-Repos/React-portfolio/src/components/pages/Contact.js"],"sourcesContent":["import '../../styles/Header.css';\r\nimport '../../styles/contact.css';\r\nimport React, { useState } from 'react';\r\nimport { validateEmail } from '../../utils/helpers';\r\nimport Header from '../Header';\r\nimport Footer from '../Footer';\r\nfunction Contact() {\r\n  \r\n    // Create state variables for the fields in the form\r\n    // We are also setting their initial values to an empty string\r\n    const [firstName, setFirstName] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [message, setMessage] = useState('');\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n  \r\n    const handleInputChange = (e) => {\r\n      // Getting the value and name of the input which triggered the change\r\n      const { target } = e;\r\n      const inputType = target.name;\r\n      const inputValue = target.value;\r\n  \r\n      // Based on the input type, we set the state of either email, username, and message\r\n     /*if (inputType === 'firstName') {\r\n        setFirstName(inputValue);\r\n      } else if (inputType === 'email') {\r\n        setEmail(inputValue);\r\n      } else {\r\n        setMessage(inputValue);\r\n      }*/\r\n    switch (inputType)\r\n    {\r\n      case 'firstName':\r\n        setFirstName(inputValue);\r\n      break;\r\n      case 'email':\r\n        setEmail(inputValue);\r\n      break;\r\n      case 'message':\r\n         setMessage(inputValue);\r\n      break;\r\n      default:\r\n        setMessage(inputValue);\r\n        break;\r\n\r\n    }\r\n  \r\n    };\r\n    \r\n    const handleFormSubmit = (e) => {\r\n      // Preventing the default behavior of the form submit (which is to refresh the page)\r\n      e.preventDefault();\r\n  \r\n      // First we check to see if the email is not valid or if the userName is empty. If so we set an error message to be displayed on the page.\r\n      if (!validateEmail(email))  {\r\n        setErrorMessage('Email is invalid');\r\n        // We want to exit out of this code block if something is wrong so that the user can correct it\r\n        return;\r\n        // Then we check to see if the password is not valid. If so, we set an error message regarding the password.\r\n      }\r\n      \r\n      alert(`Hello ${firstName} Message has been sent`);\r\n  \r\n      // If everything goes according to plan, we want to clear out the input after a successful registration.\r\n      setFirstName('');\r\n      setEmail('');\r\n      setMessage('');\r\n    };\r\n  \r\n    return (\r\n      \r\n      <div>\r\n        <Header />\r\n        <h2>Contact me</h2>\r\n         <form className=\"form\" >\r\n          <input\r\n            value={firstName}\r\n            name=\"firstName\"\r\n            onChange={handleInputChange}\r\n            type=\"text\" \r\n            placeholder=\"First name\"\r\n          />\r\n          <input\r\n            value={email}\r\n            name=\"email\"\r\n            onChange={handleInputChange}\r\n            type=\"email\"\r\n            placeholder=\"Email\"\r\n          />\r\n          <textarea\r\n            value={message}\r\n            name=\"message\"\r\n            onChange={handleInputChange}\r\n            type=\"text\"\r\n            placeholder=\"type here\"\r\n          />\r\n          <button type=\"button\" onClick={handleFormSubmit}>Submit</button>\r\n        </form>\r\n        {errorMessage && (\r\n          <div>\r\n            <p className=\"error-text\">{errorMessage}</p>\r\n          </div>\r\n        )}\r\n        <Footer />\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default Contact;\r\n  \r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}